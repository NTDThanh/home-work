// <auto-generated />
using System;
using EFCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCore.Data.Migrations
{
    [DbContext(typeof(HomeWorkContext))]
    [Migration("20181029161839_fix_add_nullable")]
    partial class fix_add_nullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCore.Domain.Answers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Detail");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Note");

                    b.Property<Guid?>("QuestionsId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EFCore.Domain.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CoursesId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Detail");

                    b.Property<Guid?>("ExercisesId");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid?>("QuestionsId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.Property<Guid?>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("CoursesId");

                    b.HasIndex("ExercisesId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EFCore.Domain.Courses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EFCore.Domain.ExerciseResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AnswerId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("ExercisesId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Point");

                    b.Property<Guid?>("QuestionsId");

                    b.Property<string>("Rank");

                    b.Property<DateTime?>("TestTime");

                    b.Property<int?>("TimeRemaining");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("ExercisesId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("UserId");

                    b.ToTable("ExerciseResult");
                });

            modelBuilder.Entity("EFCore.Domain.Exercises", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CoursesId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid?>("LevelId");

                    b.Property<string>("Name");

                    b.Property<Guid?>("SkillsId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.HasKey("Id");

                    b.HasIndex("CoursesId");

                    b.HasIndex("LevelId");

                    b.HasIndex("SkillsId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("EFCore.Domain.ExercisesQuestions", b =>
                {
                    b.Property<Guid>("ExercisesId");

                    b.Property<Guid>("QuestionsId");

                    b.HasKey("ExercisesId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("ExercisesQuestions");
                });

            modelBuilder.Entity("EFCore.Domain.Levels", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CoursesId");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<Guid>("ParentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.HasKey("Id");

                    b.HasIndex("CoursesId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("EFCore.Domain.Questions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CorrectAnswerCode");

                    b.Property<int>("CountDown");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("Detail");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid?>("LevelId");

                    b.Property<Guid?>("SkillsId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("SkillsId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EFCore.Domain.Skills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<string>("Technology");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.Property<Guid?>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("EFCore.Domain.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("DefaultRedirect");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Menu");

                    b.Property<string>("Name");

                    b.Property<int>("Role");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.HasKey("Id");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("EFCore.Domain.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthenticationCode");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Device");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime>("LogAt");

                    b.Property<string>("LoginStatus");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("EFCore.Domain.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("CreateBy")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Mail");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<string>("Slat");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<Guid?>("UpdateBy");

                    b.Property<Guid?>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EFCore.Domain.Answers", b =>
                {
                    b.HasOne("EFCore.Domain.Questions", "Questions")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionsId");
                });

            modelBuilder.Entity("EFCore.Domain.Comments", b =>
                {
                    b.HasOne("EFCore.Domain.Courses", "Courses")
                        .WithMany()
                        .HasForeignKey("CoursesId");

                    b.HasOne("EFCore.Domain.Exercises", "Exercises")
                        .WithMany()
                        .HasForeignKey("ExercisesId");

                    b.HasOne("EFCore.Domain.Questions", "Questions")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionsId");

                    b.HasOne("EFCore.Domain.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("EFCore.Domain.ExerciseResult", b =>
                {
                    b.HasOne("EFCore.Domain.Answers", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("EFCore.Domain.Exercises", "Exercises")
                        .WithMany()
                        .HasForeignKey("ExercisesId");

                    b.HasOne("EFCore.Domain.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("EFCore.Domain.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EFCore.Domain.Exercises", b =>
                {
                    b.HasOne("EFCore.Domain.Courses")
                        .WithMany("Exercises")
                        .HasForeignKey("CoursesId");

                    b.HasOne("EFCore.Domain.Levels", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("EFCore.Domain.Skills", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId");
                });

            modelBuilder.Entity("EFCore.Domain.ExercisesQuestions", b =>
                {
                    b.HasOne("EFCore.Domain.Exercises", "Exercises")
                        .WithMany("ExercisesQuestions")
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EFCore.Domain.Questions", "Questions")
                        .WithMany("ExercisesQuestions")
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EFCore.Domain.Levels", b =>
                {
                    b.HasOne("EFCore.Domain.Courses")
                        .WithMany("Level")
                        .HasForeignKey("CoursesId");
                });

            modelBuilder.Entity("EFCore.Domain.Questions", b =>
                {
                    b.HasOne("EFCore.Domain.Levels", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("EFCore.Domain.Skills", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId");
                });

            modelBuilder.Entity("EFCore.Domain.Skills", b =>
                {
                    b.HasOne("EFCore.Domain.Users")
                        .WithMany("Skills")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("EFCore.Domain.UserLogin", b =>
                {
                    b.HasOne("EFCore.Domain.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EFCore.Domain.Users", b =>
                {
                    b.HasOne("EFCore.Domain.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId");
                });
#pragma warning restore 612, 618
        }
    }
}
